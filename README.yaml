---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: github-action-matrix-unlimited-jq-query

# Tags of this project
tags:
  - github-action

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/github-action-matrix-unlimited-jq-query

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/github-action-matrix-unlimited-jq-query.svg"
    url: "https://github.com/cloudposse/github-action-matrix-unlimited-jq-query/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
  - name: "Setup matrix"
    description: "GitHub action to create reusable dynamic job matrices for your workflows."
    url: "https://github.com/druzsan/setup-matrix"

# Short description of this project
description: GitHub Action to group list of Atmos stacks and split each group on chunks of 256 items.

introduction: |-
  GitHub Actions matrix have [limit to 256 items](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#using-a-matrix-strategy)
  There is workaround to extend the limit with [reusable workflows](https://github.com/orgs/community/discussions/38704)
  This GitHub Action output query support up to 3 nested workflows levels.
  In theory run 256 ^ 3 (i.e., 16 777 216) jobs per workflow run!
  
  | Matrix max nested level | Total jobs count limit   |
  |-------------------------|--------------------------|
  |         1               |            256           |
  |         2               |           65 536         | 
  |         3               |         16 777 216       |
  
  
  > [!WARNING]  
  > Restrict concurrency to avoid DDOS GitHub Actions API and get restriction on your account.
  >
  >   | Matrix max nested level | First Matrix Concurrency | Second Matrix Concurrency | Third Matrix Concurrency |
  >   |-------------------------|--------------------------|---------------------------|--------------------------|
  >   |         1               |            x             |              -            |             -            |
  >   |         2               |            1             |              x            |             -            | 
  >   |         3               |            1             |              1            |             x            |
  >


references:
  - name: "github-action-atmos-affected-stacks"
    description: "A composite workflow that runs the atmos describe affected command"
    url: "https://github.com/cloudposse/github-action-atmos-affected-stacks"


# How to use this project
usage: |-
  The action have 3 modes depends of how many nested levels you want. 
  The settings affect to reusable workflows count and usage pattern.
  
  ## 1 Level of nested matrices
  
  `.github/workflows/matrices-1.yml`
  
  ```yaml
    name: Pull Request
    on:
      pull_request:
        branches: [ 'main' ]
        types: [opened, synchronize, reopened, closed, labeled, unlabeled]

    jobs:
      matrix-builder:
        runs-on: self-hosted
        name: Affected stacks
        outputs:
          matrix: ${{ steps.jq.outputs.output }}
        steps:
          - id: setup-matrix
            uses: druzsan/setup-matrix@v1
            with:
              matrix: |
                os: ubuntu-latest windows-latest macos-latest,
                python-version: 3.8 3.9 3.10
                arch: arm64 amd64

          - uses: cloudposse/github-action-matrix-unlimited-jq-query@main
            id: query
            with:
              sort-by: '[.python-version, .os, .arch] | join("-")'
              group-by: '.arch'
              nested-matrices-count: '1'          

          - id: jq
            uses: cloudposse/github-action-jq@v0
            with:
              compact: true
              input: ${{ steps.setup-matrix.outputs.matrix }}
              script: ${{ steps.query.outputs.query }}
  
      operation:
        if: ${{ needs.matrix-builder.outputs.matrix != '{"include":[]}' }}
        needs:
          - matrix-builder
        strategy:
          max-parallel: 10
          fail-fast: false # Don't fail fast to avoid locking TF State
          matrix: ${{ fromJson(needs.matrix-builder.outputs.matrix) }}
        name: Do (${{ matrix.arch }})
        runs-on: self-hosted
        steps:
          - shell: bash
            run: |
              echo "Do real work - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.python-version }}"
  ```

  ## 2 Level of nested matrices
  
  `.github/workflows/matrices-1.yml`
  
  ```yaml
    name: Pull Request
    on:
      pull_request:
        branches: [ 'main' ]
        types: [opened, synchronize, reopened, closed, labeled, unlabeled]

    jobs:
      matrix-builder:
        runs-on: self-hosted
        name: Affected stacks
        outputs:
          matrix: ${{ steps.jq.outputs.output }}
        steps:
          - id: setup-matrix
            uses: druzsan/setup-matrix@v1
            with:
              matrix: |
                os: ubuntu-latest windows-latest macos-latest,
                python-version: 3.8 3.9 3.10
                arch: arm64 amd64

          - uses: cloudposse/github-action-matrix-unlimited-jq-query@main
            id: query
            with:
              sort-by: '[.python-version, .os, .arch] | join("-")'
              group-by: '.arch'
              nested-matrices-count: '1'          

          - id: jq
            uses: cloudposse/github-action-jq@v0
            with:
              compact: true
              input: ${{ steps.setup-matrix.outputs.matrix }}
              script: ${{ steps.query.outputs.query }}
  
      operation:
        if: ${{ needs.matrix-builder.outputs.matrix != '{"include":[]}' }}
        uses: ./.github/workflows/matrices-2.yml
        needs:
          - matrix-builder
        strategy:
          max-parallel: 1 # This is important to avoid ddos GHA API
          fail-fast: false # Don't fail fast to avoid locking TF State
          matrix: ${{ fromJson(needs.matrix-builder.outputs.matrix) }}
        name: Group (${{ matrix.name }})
        with:
          items: ${{ matrix.items }}
  ```

  `.github/workflows/matrices-2.yml`
  
  ```yaml
    name: Reusable workflow for 2 level of nested matrices
    on:
      workflow_call:
        inputs:
          items:
            description: "Items"
            required: true
            type: string

    jobs:
      operation:
        if: ${{ inputs.items != '{"include":[]}' }}
        strategy:
          max-parallel: 10
          fail-fast: false # Don't fail fast to avoid locking TF State
          matrix: ${{ fromJson(inputs.items) }}
        name: Do (${{ matrix.arch }})
        runs-on: self-hosted
        steps:
          - shell: bash
            run: |
              echo "Do real work - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.python-version }}"
  ```
  
  
  ## 3 Level of nested matrices
  
  `.github/workflows/matrices-1.yml`
  
  ```yaml
    name: Pull Request
    on:
      pull_request:
        branches: [ 'main' ]
        types: [opened, synchronize, reopened, closed, labeled, unlabeled]

    jobs:
      matrix-builder:
        runs-on: self-hosted
        name: Affected stacks
        outputs:
          matrix: ${{ steps.jq.outputs.output }}
        steps:
          - id: setup-matrix
            uses: druzsan/setup-matrix@v1
            with:
              matrix: |
                os: ubuntu-latest windows-latest macos-latest,
                python-version: 3.8 3.9 3.10
                arch: arm64 amd64

          - uses: cloudposse/github-action-matrix-unlimited-jq-query@main
            id: query
            with:
              sort-by: '[.python-version, .os, .arch] | join("-")'
              group-by: '.arch'
              nested-matrices-count: '1'          

          - id: jq
            uses: cloudposse/github-action-jq@v0
            with:
              compact: true
              input: ${{ steps.setup-matrix.outputs.matrix }}
              script: ${{ steps.query.outputs.query }}
  
      operation:
        if: ${{ needs.matrix-builder.outputs.matrix != '{"include":[]}' }}
        uses: ./.github/workflows/matrices-2.yml
        needs:
          - matrix-builder
        strategy:
          max-parallel: 1 # This is important to avoid ddos GHA API
          fail-fast: false # Don't fail fast to avoid locking TF State
          matrix: ${{ fromJson(needs.matrix-builder.outputs.matrix) }}
        name: Group (${{ matrix.name }})
        with:
          items: ${{ matrix.items }}
  ```

  `.github/workflows/matrices-2.yml`
  
  ```yaml
    name: Reusable workflow for 2 level of nested matrices
    on:
      workflow_call:
        inputs:
          items:
            description: "Items"
            required: true
            type: string

    jobs:
      operation:
        if: ${{ inputs.items != '{"include":[]}' }}
        uses: ./.github/workflows/matrices-3.yml
        strategy:
          max-parallel: 1 # This is important to avoid ddos GHA API
          fail-fast: false # Don't fail fast to avoid locking TF State
          matrix: ${{ fromJson(inputs.items) }}
        name: Group (${{ matrix.name }})
        with:
          items: ${{ matrix.items }}
  ```


  `.github/workflows/matrices-3.yml`
  
  ```yaml
    name: Reusable workflow for 3 level of nested matrices
    on:
      workflow_call:
        inputs:
          items:
            description: "Items"
            required: true
            type: string

    jobs:
      operation:
        if: ${{ inputs.items != '{"include":[]}' }}
        strategy:
          max-parallel: 10
          fail-fast: false # Don't fail fast to avoid locking TF State
          matrix: ${{ fromJson(inputs.items) }}
        name: Do (${{ matrix.arch }})
        runs-on: self-hosted
        steps:
          - shell: bash
            run: |
              echo "Do real work - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.python-version }}"
  ```

include:
  - "docs/github-action.md"

# Contributors to this project
contributors:
  - name: "Igor Rodionov"
    github: "goruha"