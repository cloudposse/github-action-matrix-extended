name: Test nested matrices 1
on:
#  # Uncomment when test added first time to register workflow and comment it back after workflow would be registered
#  #
#  # Added pull_request to register workflow from the PR.
#  # Read more https://stackoverflow.com/questions/63362126/github-actions-how-to-run-a-workflow-created-on-a-non-master-branch-from-the-wo
#  pull_request: {}
  workflow_dispatch: {}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "Do setup"

  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: ./
        id: current
        with:
          sort-by: '[.version, .os, .arch] | join("-")'
          group-by: '.arch'
          nested-matrices-count: '1'

      - id: matrix
        uses: cloudposse/github-action-jq@v0
        with:
          compact: true
          input: | 
            [
              {"version": "10", "os": "ubuntu-latest", "arch": "amd64"},
              {"version": "12", "os": "ubuntu-latest", "arch": "amd64"},
              {"version": "14", "os": "ubuntu-latest", "arch": "amd64"},
              {"version": "10", "os": "ubuntu-latest", "arch": "arm64"},
              {"version": "12", "os": "ubuntu-latest", "arch": "arm64"},
              {"version": "14", "os": "ubuntu-latest", "arch": "arm64"},
              {"version": "10", "os": "windows-latest", "arch": "amd64"},
              {"version": "12", "os": "windows-latest", "arch": "amd64"},
              {"version": "14", "os": "windows-latest", "arch": "amd64"},
              {"version": "10", "os": "windows-latest", "arch": "arm64"},
              {"version": "12", "os": "windows-latest", "arch": "arm64"},
              {"version": "14", "os": "windows-latest", "arch": "arm64"}            
            ]
          script: ${{ steps.current.outputs.query }}

    outputs:
      result: "${{ steps.current.outputs.query }}"
      matrix: "${{ steps.matrix.outputs.output }}"

  assert:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: nick-fields/assert-action@v1
        with:
          actual: ${{ needs.test.outputs.matrix }}
          expected: '{"include":[{"version":"10","os":"ubuntu-latest","arch":"amd64"},{"version":"10","os":"ubuntu-latest","arch":"arm64"},{"version":"10","os":"windows-latest","arch":"amd64"},{"version":"10","os":"windows-latest","arch":"arm64"},{"version":"12","os":"ubuntu-latest","arch":"amd64"},{"version":"12","os":"ubuntu-latest","arch":"arm64"},{"version":"12","os":"windows-latest","arch":"amd64"},{"version":"12","os":"windows-latest","arch":"arm64"},{"version":"14","os":"ubuntu-latest","arch":"amd64"},{"version":"14","os":"ubuntu-latest","arch":"arm64"},{"version":"14","os":"windows-latest","arch":"amd64"},{"version":"14","os":"windows-latest","arch":"arm64"}]}'

      - uses: nick-fields/assert-action@v1
        with:
          actual: ${{ needs.test.outputs.result }}
          expected: |
            def name: .stack_slug;
            def group: .stack_slug | split("-") | [.[0], .[2]] | join("-");
            
            def nestedMatricesLevelsAre(v): 1 == v; 
            
            def chunk: .key / 256 | floor;
            def groupName: [(.value | group), (chunk | if . == 0 then empty else . end)] | join(" ");
            def groupRange: [first, last] | map(.value | name) | join(" - ");
            
            def toGHAMatrix: {"include": . } ;
            
            def oneLevelMatrix: . ;
            
            def twoLevelMatrix: 
                group_by(group) |
                map( to_entries | group_by(chunk) | 
                    map({
                        "name": first | groupName,
                        "items": map(.value) | toGHAMatrix | tostring
                    })
                ) | flatten;
            
            def threeLevelMatrix:
                group_by(group) |
                map({
                  "name": first | group,
                  "items": ( to_entries | group_by(chunk) | 
                    map({
                      "name": groupRange,
                      "items": map(.value) | toGHAMatrix | tostring
                    }) | toGHAMatrix | tostring
                  )
                });
            
            def groupingStrategy:
                if nestedMatricesLevelsAre(3) then 
                    threeLevelMatrix
                elif nestedMatricesLevelsAre(2)  then 
                    twoLevelMatrix 
                else 
                    oneLevelMatrix 
                end; 
            
            sort_by(name) | groupingStrategy | toGHAMatrix


  teardown:
    runs-on: ubuntu-latest
    needs: [assert]
    if: ${{ always() }}
    steps:
      - name: Tear down
        run: echo "Do Tear down"
